<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.1   |
    |              on 2022-03-02 18:17:37              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*
* Copyright (C) Incevio Systems, Inc - All Rights Reserved
* Unauthorized copying of this file, via any medium is strictly prohibited
* Proprietary and confidential
* Written by Munna Khan <help.zcart@gmail.com>, September 2018
*/
 namespace App\Http\Controllers\Installer\Helpers; use Exception; use Illuminate\Database\SQLiteConnection; use Illuminate\Support\Facades\Artisan; use Illuminate\Support\Facades\Config; use Illuminate\Support\Facades\DB; use Symfony\Component\Console\Output\BufferedOutput; class DatabaseManager { public function migrateAndSeed() { $outputLog = new BufferedOutput(); $this->sqlite($outputLog); return $this->migrate($outputLog); } private function migrate($outputLog) { try { Artisan::call("\155\151\147\162\141\x74\145", ["\55\x2d\x66\157\x72\x63\145" => true], $outputLog); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\162\x72\157\162", $outputLog); } return $this->seed($outputLog); } private function seed($outputLog) { try { Artisan::call("\x64\x62\72\163\x65\x65\x64", ["\55\x2d\x66\x6f\x72\x63\x65" => true], $outputLog); Artisan::call("\151\156\143\x65\x76\151\157\x3a\147\x65\x6e\x65\x72\x61\164\145\x2d\153\x65\171", ["\x2d\55\146\157\x72\x63\x65" => true], $outputLog); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\162\162\157\x72", $outputLog); } return $this->response(trans("\x69\x6e\x73\x74\141\154\x6c\x65\x72\x5f\x6d\x65\163\x73\x61\x67\145\163\x2e\x66\151\x6e\x61\x6c\56\x66\x69\156\151\x73\150\145\144"), "\x73\x75\x63\x63\x65\x73\163", $outputLog); } public function seedDemoData() { ini_set("\x6d\x61\x78\x5f\145\x78\x65\x63\165\164\x69\x6f\x6e\137\x74\x69\x6d\x65", 1200); $outputLog = new BufferedOutput(); try { Artisan::call("\x69\x6e\143\145\x76\x69\x6f\72\x64\145\x6d\x6f"); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\162\162\x6f\x72", $outputLog); } return $this->response(trans("\x69\156\163\164\141\x6c\154\145\x72\x5f\x6d\x65\163\x73\141\147\145\x73\56\x66\151\156\x61\x6c\56\146\x69\x6e\151\163\150\x65\144"), "\x73\x75\x63\x63\x65\x73\163", $outputLog); } private function response($message, $status, $outputLog) { return ["\x73\x74\141\164\x75\163" => $status, "\155\x65\x73\x73\x61\147\x65" => $message, "\144\142\117\x75\x74\x70\x75\164\114\x6f\x67" => $outputLog->fetch()]; } private function sqlite($outputLog) { if (!DB::connection() instanceof SQLiteConnection) { goto ca4Y9; } $database = DB::connection()->getDatabaseName(); if (file_exists($database)) { goto a4Na1; } touch($database); DB::reconnect(Config::get("\144\x61\164\141\x62\141\163\145\56\x64\145\146\141\165\154\164")); a4Na1: $outputLog->write("\x55\x73\151\156\x67\40\123\161\x6c\114\x69\x74\x65\x20\x64\x61\x74\141\142\141\163\145\x3a\40" . $database, 1); ca4Y9: } }
